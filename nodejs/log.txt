Server running on
 => http://localhost:80
<C>-c to stop.

Recieved request for '/home/nfagan/scripts/nodejs/index.html'
from => 
IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: [33mfalse[39m,
     highWaterMark: [33m16384[39m,
     buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
     length: [33m0[39m,
     pipes: [1mnull[22m,
     pipesCount: [33m0[39m,
     flowing: [1mnull[22m,
     ended: [33mfalse[39m,
     endEmitted: [33mfalse[39m,
     reading: [33mfalse[39m,
     sync: [33mtrue[39m,
     needReadable: [33mfalse[39m,
     emittedReadable: [33mfalse[39m,
     readableListening: [33mfalse[39m,
     resumeScheduled: [33mfalse[39m,
     emitClose: [33mtrue[39m,
     destroyed: [33mfalse[39m,
     defaultEncoding: [32m'utf8'[39m,
     awaitDrain: [33m0[39m,
     readingMore: [33mtrue[39m,
     decoder: [1mnull[22m,
     encoding: [1mnull[22m },
  readable: [33mtrue[39m,
  _events: [Object: null prototype] {},
  _eventsCount: [33m0[39m,
  _maxListeners: [90mundefined[39m,
  socket:
   Socket {
     connecting: [33mfalse[39m,
     _hadError: [33mfalse[39m,
     _handle:
      TCP {
        reading: [33mtrue[39m,
        onread: [36m[Function: onStreamRead][39m,
        onconnection: [1mnull[22m,
        _consumed: [33mtrue[39m,
        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
     _parent: [1mnull[22m,
     _host: [1mnull[22m,
     _readableState:
      ReadableState {
        objectMode: [33mfalse[39m,
        highWaterMark: [33m16384[39m,
        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
        length: [33m0[39m,
        pipes: [1mnull[22m,
        pipesCount: [33m0[39m,
        flowing: [33mtrue[39m,
        ended: [33mfalse[39m,
        endEmitted: [33mfalse[39m,
        reading: [33mtrue[39m,
        sync: [33mfalse[39m,
        needReadable: [33mtrue[39m,
        emittedReadable: [33mfalse[39m,
        readableListening: [33mfalse[39m,
        resumeScheduled: [33mfalse[39m,
        emitClose: [33mfalse[39m,
        destroyed: [33mfalse[39m,
        defaultEncoding: [32m'utf8'[39m,
        awaitDrain: [33m0[39m,
        readingMore: [33mfalse[39m,
        decoder: [1mnull[22m,
        encoding: [1mnull[22m },
     readable: [33mtrue[39m,
     _events:
      [Object: null prototype] {
        end:
         [ [36m[Function: onReadableStreamEnd][39m,
           [36m[Function: bound socketOnEnd][39m ],
        drain: [ [36m[Function: ondrain][39m, [36m[Function: bound socketOnDrain][39m ],
        timeout: [36m[Function: socketOnTimeout][39m,
        data: [36m[Function: bound socketOnData][39m,
        error: [36m[Function: socketOnError][39m,
        close:
         [ [36m[Function: bound socketOnClose][39m,
           [36m[Function: onServerResponseClose][39m ],
        resume: [36m[Function: onSocketResume][39m,
        pause: [36m[Function: onSocketPause][39m },
     _eventsCount: [33m8[39m,
     _maxListeners: [90mundefined[39m,
     _writableState:
      WritableState {
        objectMode: [33mfalse[39m,
        highWaterMark: [33m16384[39m,
        finalCalled: [33mfalse[39m,
        needDrain: [33mfalse[39m,
        ending: [33mfalse[39m,
        ended: [33mfalse[39m,
        finished: [33mfalse[39m,
        destroyed: [33mfalse[39m,
        decodeStrings: [33mfalse[39m,
        defaultEncoding: [32m'utf8'[39m,
        length: [33m0[39m,
        writing: [33mfalse[39m,
        corked: [33m0[39m,
        sync: [33mtrue[39m,
        bufferProcessing: [33mfalse[39m,
        onwrite: [36m[Function: bound onwrite][39m,
        writecb: [1mnull[22m,
        writelen: [33m0[39m,
        bufferedRequest: [1mnull[22m,
        lastBufferedRequest: [1mnull[22m,
        pendingcb: [33m0[39m,
        prefinished: [33mfalse[39m,
        errorEmitted: [33mfalse[39m,
        emitClose: [33mfalse[39m,
        bufferedRequestCount: [33m0[39m,
        corkedRequestsFree:
         { next: [1mnull[22m,
           entry: [1mnull[22m,
           finish: [36m[Function: bound onCorkedFinish][39m } },
     writable: [33mtrue[39m,
     allowHalfOpen: [33mtrue[39m,
     _sockname: [1mnull[22m,
     _pendingData: [1mnull[22m,
     _pendingEncoding: [32m''[39m,
     server:
      Server {
        _events:
         [Object: null prototype] {
           request: [36m[Function][39m,
           connection: [36m[Function: connectionListener][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        _connections: [33m2[39m,
        _handle:
         TCP {
           reading: [33mfalse[39m,
           onread: [1mnull[22m,
           onconnection: [36m[Function: onconnection][39m,
           [[32mSymbol(owner)[39m]: [36m[Circular][39m },
        _usingWorkers: [33mfalse[39m,
        _workers: [],
        _unref: [33mfalse[39m,
        allowHalfOpen: [33mtrue[39m,
        pauseOnConnect: [33mfalse[39m,
        httpAllowHalfOpen: [33mfalse[39m,
        timeout: [33m120000[39m,
        keepAliveTimeout: [33m5000[39m,
        _pendingResponseData: [33m0[39m,
        maxHeadersCount: [1mnull[22m,
        _connectionKey: [32m'6::::80'[39m,
        [[32mSymbol(IncomingMessage)[39m]: [36m[Function: IncomingMessage][39m,
        [[32mSymbol(ServerResponse)[39m]: [36m[Function: ServerResponse][39m,
        [[32mSymbol(asyncId)[39m]: [33m4[39m },
     _server:
      Server {
        _events:
         [Object: null prototype] {
           request: [36m[Function][39m,
           connection: [36m[Function: connectionListener][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        _connections: [33m2[39m,
        _handle:
         TCP {
           reading: [33mfalse[39m,
           onread: [1mnull[22m,
           onconnection: [36m[Function: onconnection][39m,
           [[32mSymbol(owner)[39m]: [36m[Circular][39m },
        _usingWorkers: [33mfalse[39m,
        _workers: [],
        _unref: [33mfalse[39m,
        allowHalfOpen: [33mtrue[39m,
        pauseOnConnect: [33mfalse[39m,
        httpAllowHalfOpen: [33mfalse[39m,
        timeout: [33m120000[39m,
        keepAliveTimeout: [33m5000[39m,
        _pendingResponseData: [33m0[39m,
        maxHeadersCount: [1mnull[22m,
        _connectionKey: [32m'6::::80'[39m,
        [[32mSymbol(IncomingMessage)[39m]: [36m[Function: IncomingMessage][39m,
        [[32mSymbol(ServerResponse)[39m]: [36m[Function: ServerResponse][39m,
        [[32mSymbol(asyncId)[39m]: [33m4[39m },
     timeout: [33m120000[39m,
     parser:
      HTTPParser {
        [32m'0'[39m: [36m[Function: parserOnHeaders][39m,
        [32m'1'[39m: [36m[Function: parserOnHeadersComplete][39m,
        [32m'2'[39m: [36m[Function: parserOnBody][39m,
        [32m'3'[39m: [36m[Function: parserOnMessageComplete][39m,
        [32m'4'[39m: [36m[Function: bound onParserExecute][39m,
        _headers: [],
        _url: [32m''[39m,
        socket: [36m[Circular][39m,
        incoming: [36m[Circular][39m,
        outgoing: [1mnull[22m,
        maxHeaderPairs: [33m2000[39m,
        _consumed: [33mtrue[39m,
        onIncoming: [36m[Function: bound parserOnIncoming][39m,
        [[32mSymbol(isReused)[39m]: [33mfalse[39m },
     on: [36m[Function: socketOnWrap][39m,
     _paused: [33mfalse[39m,
     _httpMessage:
      ServerResponse {
        _events:
         [Object: null prototype] { finish: [36m[Function: bound resOnFinish][39m },
        _eventsCount: [33m1[39m,
        _maxListeners: [90mundefined[39m,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: [33m0[39m,
        writable: [33mtrue[39m,
        _last: [33mfalse[39m,
        chunkedEncoding: [33mfalse[39m,
        shouldKeepAlive: [33mtrue[39m,
        useChunkedEncodingByDefault: [33mtrue[39m,
        sendDate: [33mtrue[39m,
        _removedConnection: [33mfalse[39m,
        _removedContLen: [33mfalse[39m,
        _removedTE: [33mfalse[39m,
        _contentLength: [1mnull[22m,
        _hasBody: [33mtrue[39m,
        _trailer: [32m''[39m,
        finished: [33mfalse[39m,
        _headerSent: [33mfalse[39m,
        socket: [36m[Circular][39m,
        connection: [36m[Circular][39m,
        _header: [1mnull[22m,
        _onPendingData: [36m[Function: bound updateOutgoingData][39m,
        _sent100: [33mfalse[39m,
        _expect_continue: [33mfalse[39m,
        [[32mSymbol(isCorked)[39m]: [33mfalse[39m,
        [[32mSymbol(outHeadersKey)[39m]: [1mnull[22m },
     [[32mSymbol(asyncId)[39m]: [33m7[39m,
     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
     [[32mSymbol(timeout)[39m]:
      Timeout {
        _idleTimeout: [33m120000[39m,
        _idlePrev: [36m[Timeout][39m,
        _idleNext: [36m[TimersList][39m,
        _idleStart: [33m1796[39m,
        _onTimeout: [36m[Function: bound ][39m,
        _timerArgs: [90mundefined[39m,
        _repeat: [1mnull[22m,
        _destroyed: [33mfalse[39m,
        [[32mSymbol(refed)[39m]: [33mfalse[39m,
        [[32mSymbol(asyncId)[39m]: [33m8[39m,
        [[32mSymbol(triggerId)[39m]: [33m7[39m },
     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
  connection:
   Socket {
     connecting: [33mfalse[39m,
     _hadError: [33mfalse[39m,
     _handle:
      TCP {
        reading: [33mtrue[39m,
        onread: [36m[Function: onStreamRead][39m,
        onconnection: [1mnull[22m,
        _consumed: [33mtrue[39m,
        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
     _parent: [1mnull[22m,
     _host: [1mnull[22m,
     _readableState:
      ReadableState {
        objectMode: [33mfalse[39m,
        highWaterMark: [33m16384[39m,
        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
        length: [33m0[39m,
        pipes: [1mnull[22m,
        pipesCount: [33m0[39m,
        flowing: [33mtrue[39m,
        ended: [33mfalse[39m,
        endEmitted: [33mfalse[39m,
        reading: [33mtrue[39m,
        sync: [33mfalse[39m,
        needReadable: [33mtrue[39m,
        emittedReadable: [33mfalse[39m,
        readableListening: [33mfalse[39m,
        resumeScheduled: [33mfalse[39m,
        emitClose: [33mfalse[39m,
        destroyed: [33mfalse[39m,
        defaultEncoding: [32m'utf8'[39m,
        awaitDrain: [33m0[39m,
        readingMore: [33mfalse[39m,
        decoder: [1mnull[22m,
        encoding: [1mnull[22m },
     readable: [33mtrue[39m,
     _events:
      [Object: null prototype] {
        end:
         [ [36m[Function: onReadableStreamEnd][39m,
           [36m[Function: bound socketOnEnd][39m ],
        drain: [ [36m[Function: ondrain][39m, [36m[Function: bound socketOnDrain][39m ],
        timeout: [36m[Function: socketOnTimeout][39m,
        data: [36m[Function: bound socketOnData][39m,
        error: [36m[Function: socketOnError][39m,
        close:
         [ [36m[Function: bound socketOnClose][39m,
           [36m[Function: onServerResponseClose][39m ],
        resume: [36m[Function: onSocketResume][39m,
        pause: [36m[Function: onSocketPause][39m },
     _eventsCount: [33m8[39m,
     _maxListeners: [90mundefined[39m,
     _writableState:
      WritableState {
        objectMode: [33mfalse[39m,
        highWaterMark: [33m16384[39m,
        finalCalled: [33mfalse[39m,
        needDrain: [33mfalse[39m,
        ending: [33mfalse[39m,
        ended: [33mfalse[39m,
        finished: [33mfalse[39m,
        destroyed: [33mfalse[39m,
        decodeStrings: [33mfalse[39m,
        defaultEncoding: [32m'utf8'[39m,
        length: [33m0[39m,
        writing: [33mfalse[39m,
        corked: [33m0[39m,
        sync: [33mtrue[39m,
        bufferProcessing: [33mfalse[39m,
        onwrite: [36m[Function: bound onwrite][39m,
        writecb: [1mnull[22m,
        writelen: [33m0[39m,
        bufferedRequest: [1mnull[22m,
        lastBufferedRequest: [1mnull[22m,
        pendingcb: [33m0[39m,
        prefinished: [33mfalse[39m,
        errorEmitted: [33mfalse[39m,
        emitClose: [33mfalse[39m,
        bufferedRequestCount: [33m0[39m,
        corkedRequestsFree:
         { next: [1mnull[22m,
           entry: [1mnull[22m,
           finish: [36m[Function: bound onCorkedFinish][39m } },
     writable: [33mtrue[39m,
     allowHalfOpen: [33mtrue[39m,
     _sockname: [1mnull[22m,
     _pendingData: [1mnull[22m,
     _pendingEncoding: [32m''[39m,
     server:
      Server {
        _events:
         [Object: null prototype] {
           request: [36m[Function][39m,
           connection: [36m[Function: connectionListener][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        _connections: [33m2[39m,
        _handle:
         TCP {
           reading: [33mfalse[39m,
           onread: [1mnull[22m,
           onconnection: [36m[Function: onconnection][39m,
           [[32mSymbol(owner)[39m]: [36m[Circular][39m },
        _usingWorkers: [33mfalse[39m,
        _workers: [],
        _unref: [33mfalse[39m,
        allowHalfOpen: [33mtrue[39m,
        pauseOnConnect: [33mfalse[39m,
        httpAllowHalfOpen: [33mfalse[39m,
        timeout: [33m120000[39m,
        keepAliveTimeout: [33m5000[39m,
        _pendingResponseData: [33m0[39m,
        maxHeadersCount: [1mnull[22m,
        _connectionKey: [32m'6::::80'[39m,
        [[32mSymbol(IncomingMessage)[39m]: [36m[Function: IncomingMessage][39m,
        [[32mSymbol(ServerResponse)[39m]: [36m[Function: ServerResponse][39m,
        [[32mSymbol(asyncId)[39m]: [33m4[39m },
     _server:
      Server {
        _events:
         [Object: null prototype] {
           request: [36m[Function][39m,
           connection: [36m[Function: connectionListener][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        _connections: [33m2[39m,
        _handle:
         TCP {
           reading: [33mfalse[39m,
           onread: [1mnull[22m,
           onconnection: [36m[Function: onconnection][39m,
           [[32mSymbol(owner)[39m]: [36m[Circular][39m },
        _usingWorkers: [33mfalse[39m,
        _workers: [],
        _unref: [33mfalse[39m,
        allowHalfOpen: [33mtrue[39m,
        pauseOnConnect: [33mfalse[39m,
        httpAllowHalfOpen: [33mfalse[39m,
        timeout: [33m120000[39m,
        keepAliveTimeout: [33m5000[39m,
        _pendingResponseData: [33m0[39m,
        maxHeadersCount: [1mnull[22m,
        _connectionKey: [32m'6::::80'[39m,
        [[32mSymbol(IncomingMessage)[39m]: [36m[Function: IncomingMessage][39m,
        [[32mSymbol(ServerResponse)[39m]: [36m[Function: ServerResponse][39m,
        [[32mSymbol(asyncId)[39m]: [33m4[39m },
     timeout: [33m120000[39m,
     parser:
      HTTPParser {
        [32m'0'[39m: [36m[Function: parserOnHeaders][39m,
        [32m'1'[39m: [36m[Function: parserOnHeadersComplete][39m,
        [32m'2'[39m: [36m[Function: parserOnBody][39m,
        [32m'3'[39m: [36m[Function: parserOnMessageComplete][39m,
        [32m'4'[39m: [36m[Function: bound onParserExecute][39m,
        _headers: [],
        _url: [32m''[39m,
        socket: [36m[Circular][39m,
        incoming: [36m[Circular][39m,
        outgoing: [1mnull[22m,
        maxHeaderPairs: [33m2000[39m,
        _consumed: [33mtrue[39m,
        onIncoming: [36m[Function: bound parserOnIncoming][39m,
        [[32mSymbol(isReused)[39m]: [33mfalse[39m },
     on: [36m[Function: socketOnWrap][39m,
     _paused: [33mfalse[39m,
     _httpMessage:
      ServerResponse {
        _events:
         [Object: null prototype] { finish: [36m[Function: bound resOnFinish][39m },
        _eventsCount: [33m1[39m,
        _maxListeners: [90mundefined[39m,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: [33m0[39m,
        writable: [33mtrue[39m,
        _last: [33mfalse[39m,
        chunkedEncoding: [33mfalse[39m,
        shouldKeepAlive: [33mtrue[39m,
        useChunkedEncodingByDefault: [33mtrue[39m,
        sendDate: [33mtrue[39m,
        _removedConnection: [33mfalse[39m,
        _removedContLen: [33mfalse[39m,
        _removedTE: [33mfalse[39m,
        _contentLength: [1mnull[22m,
        _hasBody: [33mtrue[39m,
        _trailer: [32m''[39m,
        finished: [33mfalse[39m,
        _headerSent: [33mfalse[39m,
        socket: [36m[Circular][39m,
        connection: [36m[Circular][39m,
        _header: [1mnull[22m,
        _onPendingData: [36m[Function: bound updateOutgoingData][39m,
        _sent100: [33mfalse[39m,
        _expect_continue: [33mfalse[39m,
        [[32mSymbol(isCorked)[39m]: [33mfalse[39m,
        [[32mSymbol(outHeadersKey)[39m]: [1mnull[22m },
     [[32mSymbol(asyncId)[39m]: [33m7[39m,
     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
     [[32mSymbol(timeout)[39m]:
      Timeout {
        _idleTimeout: [33m120000[39m,
        _idlePrev: [36m[Timeout][39m,
        _idleNext: [36m[TimersList][39m,
        _idleStart: [33m1796[39m,
        _onTimeout: [36m[Function: bound ][39m,
        _timerArgs: [90mundefined[39m,
        _repeat: [1mnull[22m,
        _destroyed: [33mfalse[39m,
        [[32mSymbol(refed)[39m]: [33mfalse[39m,
        [[32mSymbol(asyncId)[39m]: [33m8[39m,
        [[32mSymbol(triggerId)[39m]: [33m7[39m },
     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
  httpVersionMajor: [33m1[39m,
  httpVersionMinor: [33m1[39m,
  httpVersion: [32m'1.1'[39m,
  complete: [33mfalse[39m,
  headers:
   { host: [32m'localhost'[39m,
     connection: [32m'keep-alive'[39m,
     [32m'cache-control'[39m: [32m'max-age=0'[39m,
     [32m'upgrade-insecure-requests'[39m: [32m'1'[39m,
     [32m'user-agent'[39m:
      [32m'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'[39m,
     dnt: [32m'1'[39m,
     accept:
      [32m'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'[39m,
     [32m'accept-encoding'[39m: [32m'gzip, deflate, br'[39m,
     [32m'accept-language'[39m: [32m'en-CA,en-GB;q=0.9,en-US;q=0.8,en;q=0.7'[39m },
  rawHeaders:
   [ [32m'Host'[39m,
     [32m'localhost'[39m,
     [32m'Connection'[39m,
     [32m'keep-alive'[39m,
     [32m'Cache-Control'[39m,
     [32m'max-age=0'[39m,
     [32m'Upgrade-Insecure-Requests'[39m,
     [32m'1'[39m,
     [32m'User-Agent'[39m,
     [32m'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36'[39m,
     [32m'DNT'[39m,
     [32m'1'[39m,
     [32m'Accept'[39m,
     [32m'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'[39m,
     [32m'Accept-Encoding'[39m,
     [32m'gzip, deflate, br'[39m,
     [32m'Accept-Language'[39m,
     [32m'en-CA,en-GB;q=0.9,en-US;q=0.8,en;q=0.7'[39m ],
  trailers: {},
  rawTrailers: [],
  aborted: [33mfalse[39m,
  upgrade: [33mfalse[39m,
  url: [32m'/index.html'[39m,
  method: [32m'GET'[39m,
  statusCode: [1mnull[22m,
  statusMessage: [1mnull[22m,
  client:
   Socket {
     connecting: [33mfalse[39m,
     _hadError: [33mfalse[39m,
     _handle:
      TCP {
        reading: [33mtrue[39m,
        onread: [36m[Function: onStreamRead][39m,
        onconnection: [1mnull[22m,
        _consumed: [33mtrue[39m,
        [[32mSymbol(owner)[39m]: [36m[Circular][39m },
     _parent: [1mnull[22m,
     _host: [1mnull[22m,
     _readableState:
      ReadableState {
        objectMode: [33mfalse[39m,
        highWaterMark: [33m16384[39m,
        buffer: BufferList { head: [1mnull[22m, tail: [1mnull[22m, length: [33m0[39m },
        length: [33m0[39m,
        pipes: [1mnull[22m,
        pipesCount: [33m0[39m,
        flowing: [33mtrue[39m,
        ended: [33mfalse[39m,
        endEmitted: [33mfalse[39m,
        reading: [33mtrue[39m,
        sync: [33mfalse[39m,
        needReadable: [33mtrue[39m,
        emittedReadable: [33mfalse[39m,
        readableListening: [33mfalse[39m,
        resumeScheduled: [33mfalse[39m,
        emitClose: [33mfalse[39m,
        destroyed: [33mfalse[39m,
        defaultEncoding: [32m'utf8'[39m,
        awaitDrain: [33m0[39m,
        readingMore: [33mfalse[39m,
        decoder: [1mnull[22m,
        encoding: [1mnull[22m },
     readable: [33mtrue[39m,
     _events:
      [Object: null prototype] {
        end:
         [ [36m[Function: onReadableStreamEnd][39m,
           [36m[Function: bound socketOnEnd][39m ],
        drain: [ [36m[Function: ondrain][39m, [36m[Function: bound socketOnDrain][39m ],
        timeout: [36m[Function: socketOnTimeout][39m,
        data: [36m[Function: bound socketOnData][39m,
        error: [36m[Function: socketOnError][39m,
        close:
         [ [36m[Function: bound socketOnClose][39m,
           [36m[Function: onServerResponseClose][39m ],
        resume: [36m[Function: onSocketResume][39m,
        pause: [36m[Function: onSocketPause][39m },
     _eventsCount: [33m8[39m,
     _maxListeners: [90mundefined[39m,
     _writableState:
      WritableState {
        objectMode: [33mfalse[39m,
        highWaterMark: [33m16384[39m,
        finalCalled: [33mfalse[39m,
        needDrain: [33mfalse[39m,
        ending: [33mfalse[39m,
        ended: [33mfalse[39m,
        finished: [33mfalse[39m,
        destroyed: [33mfalse[39m,
        decodeStrings: [33mfalse[39m,
        defaultEncoding: [32m'utf8'[39m,
        length: [33m0[39m,
        writing: [33mfalse[39m,
        corked: [33m0[39m,
        sync: [33mtrue[39m,
        bufferProcessing: [33mfalse[39m,
        onwrite: [36m[Function: bound onwrite][39m,
        writecb: [1mnull[22m,
        writelen: [33m0[39m,
        bufferedRequest: [1mnull[22m,
        lastBufferedRequest: [1mnull[22m,
        pendingcb: [33m0[39m,
        prefinished: [33mfalse[39m,
        errorEmitted: [33mfalse[39m,
        emitClose: [33mfalse[39m,
        bufferedRequestCount: [33m0[39m,
        corkedRequestsFree:
         { next: [1mnull[22m,
           entry: [1mnull[22m,
           finish: [36m[Function: bound onCorkedFinish][39m } },
     writable: [33mtrue[39m,
     allowHalfOpen: [33mtrue[39m,
     _sockname: [1mnull[22m,
     _pendingData: [1mnull[22m,
     _pendingEncoding: [32m''[39m,
     server:
      Server {
        _events:
         [Object: null prototype] {
           request: [36m[Function][39m,
           connection: [36m[Function: connectionListener][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        _connections: [33m2[39m,
        _handle:
         TCP {
           reading: [33mfalse[39m,
           onread: [1mnull[22m,
           onconnection: [36m[Function: onconnection][39m,
           [[32mSymbol(owner)[39m]: [36m[Circular][39m },
        _usingWorkers: [33mfalse[39m,
        _workers: [],
        _unref: [33mfalse[39m,
        allowHalfOpen: [33mtrue[39m,
        pauseOnConnect: [33mfalse[39m,
        httpAllowHalfOpen: [33mfalse[39m,
        timeout: [33m120000[39m,
        keepAliveTimeout: [33m5000[39m,
        _pendingResponseData: [33m0[39m,
        maxHeadersCount: [1mnull[22m,
        _connectionKey: [32m'6::::80'[39m,
        [[32mSymbol(IncomingMessage)[39m]: [36m[Function: IncomingMessage][39m,
        [[32mSymbol(ServerResponse)[39m]: [36m[Function: ServerResponse][39m,
        [[32mSymbol(asyncId)[39m]: [33m4[39m },
     _server:
      Server {
        _events:
         [Object: null prototype] {
           request: [36m[Function][39m,
           connection: [36m[Function: connectionListener][39m },
        _eventsCount: [33m2[39m,
        _maxListeners: [90mundefined[39m,
        _connections: [33m2[39m,
        _handle:
         TCP {
           reading: [33mfalse[39m,
           onread: [1mnull[22m,
           onconnection: [36m[Function: onconnection][39m,
           [[32mSymbol(owner)[39m]: [36m[Circular][39m },
        _usingWorkers: [33mfalse[39m,
        _workers: [],
        _unref: [33mfalse[39m,
        allowHalfOpen: [33mtrue[39m,
        pauseOnConnect: [33mfalse[39m,
        httpAllowHalfOpen: [33mfalse[39m,
        timeout: [33m120000[39m,
        keepAliveTimeout: [33m5000[39m,
        _pendingResponseData: [33m0[39m,
        maxHeadersCount: [1mnull[22m,
        _connectionKey: [32m'6::::80'[39m,
        [[32mSymbol(IncomingMessage)[39m]: [36m[Function: IncomingMessage][39m,
        [[32mSymbol(ServerResponse)[39m]: [36m[Function: ServerResponse][39m,
        [[32mSymbol(asyncId)[39m]: [33m4[39m },
     timeout: [33m120000[39m,
     parser:
      HTTPParser {
        [32m'0'[39m: [36m[Function: parserOnHeaders][39m,
        [32m'1'[39m: [36m[Function: parserOnHeadersComplete][39m,
        [32m'2'[39m: [36m[Function: parserOnBody][39m,
        [32m'3'[39m: [36m[Function: parserOnMessageComplete][39m,
        [32m'4'[39m: [36m[Function: bound onParserExecute][39m,
        _headers: [],
        _url: [32m''[39m,
        socket: [36m[Circular][39m,
        incoming: [36m[Circular][39m,
        outgoing: [1mnull[22m,
        maxHeaderPairs: [33m2000[39m,
        _consumed: [33mtrue[39m,
        onIncoming: [36m[Function: bound parserOnIncoming][39m,
        [[32mSymbol(isReused)[39m]: [33mfalse[39m },
     on: [36m[Function: socketOnWrap][39m,
     _paused: [33mfalse[39m,
     _httpMessage:
      ServerResponse {
        _events:
         [Object: null prototype] { finish: [36m[Function: bound resOnFinish][39m },
        _eventsCount: [33m1[39m,
        _maxListeners: [90mundefined[39m,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: [33m0[39m,
        writable: [33mtrue[39m,
        _last: [33mfalse[39m,
        chunkedEncoding: [33mfalse[39m,
        shouldKeepAlive: [33mtrue[39m,
        useChunkedEncodingByDefault: [33mtrue[39m,
        sendDate: [33mtrue[39m,
        _removedConnection: [33mfalse[39m,
        _removedContLen: [33mfalse[39m,
        _removedTE: [33mfalse[39m,
        _contentLength: [1mnull[22m,
        _hasBody: [33mtrue[39m,
        _trailer: [32m''[39m,
        finished: [33mfalse[39m,
        _headerSent: [33mfalse[39m,
        socket: [36m[Circular][39m,
        connection: [36m[Circular][39m,
        _header: [1mnull[22m,
        _onPendingData: [36m[Function: bound updateOutgoingData][39m,
        _sent100: [33mfalse[39m,
        _expect_continue: [33mfalse[39m,
        [[32mSymbol(isCorked)[39m]: [33mfalse[39m,
        [[32mSymbol(outHeadersKey)[39m]: [1mnull[22m },
     [[32mSymbol(asyncId)[39m]: [33m7[39m,
     [[32mSymbol(lastWriteQueueSize)[39m]: [33m0[39m,
     [[32mSymbol(timeout)[39m]:
      Timeout {
        _idleTimeout: [33m120000[39m,
        _idlePrev: [36m[Timeout][39m,
        _idleNext: [36m[TimersList][39m,
        _idleStart: [33m1796[39m,
        _onTimeout: [36m[Function: bound ][39m,
        _timerArgs: [90mundefined[39m,
        _repeat: [1mnull[22m,
        _destroyed: [33mfalse[39m,
        [[32mSymbol(refed)[39m]: [33mfalse[39m,
        [[32mSymbol(asyncId)[39m]: [33m8[39m,
        [[32mSymbol(triggerId)[39m]: [33m7[39m },
     [[32mSymbol(kBytesRead)[39m]: [33m0[39m,
     [[32mSymbol(kBytesWritten)[39m]: [33m0[39m },
  _consuming: [33mfalse[39m,
  _dumped: [33mfalse[39m }
Served '200'.

